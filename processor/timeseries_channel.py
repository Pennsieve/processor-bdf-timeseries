import os
import uuid

class TimeSeriesChannel:
    def __init__(self, index, name, rate, start, end, type = 'CONTINUOUS', unit = 'uV', group='default', output_dir = '.'):
        assert type.upper() in ['CONTINUOUS', 'UNIT'], "Type must be CONTINUOUS or UNIT"

        # metadata for intra-processor tracking
        self.index    = index

        # When instantiating a new channel do not set the ID (it will be generated by the Pennsieve platform)
        self.id       = None

        self.name     = name
        self.rate     = rate

        # convert start / end to microseconds to maintain precision
        self.start    = start * 1e6
        self.end      = end * 1e6

        self.unit     = unit
        self.type     = type.upper()
        self.group    = group
        self.last_annot = 0
        self.properties = []

    def as_dict(self):
        resp = {
            'name':  self.name,
            'start': int(self.start),
            'end':   int(self.end),
            'unit':  self.unit,
            'rate':  self.rate,
            'type':  self.type,
            'group': self.group,
            'lastAnnotation': self.last_annot,
            'properties': self.properties
        }

        if self.id is not None:
            resp['id'] = self.id

        return resp
